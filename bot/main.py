import telebot
import requests
import asyncio
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from datetime import datetime, time
import aioschedule as schedule
import time
import statistics

token = open("token.txt", "r").read()
bot = AsyncTeleBot(token)

value1 = {}
value2 = {}
str1 = "usd1eur1rub1byn1"
str2 = "usd2eur2rub2byn2"
subs = []
with open("subs.txt", "r") as f:
    for line in f:
        subs.append(line)

print("—Å—á–∏—Ç–∞–ª –∏–∑ —Ñ–∞–π–ª–∞")
print(subs)


async def today():
    now = datetime.today()
    e_now = now.year
    m_now = now.month
    d_now = now.day
    wd_now = now.weekday
    return e_now, m_now, d_now, wd_now


async def val(value):
    e_now, m_now, d_now, wd_now = await today()
    num = requests.get(f"https://www.nbrb.by/api/exrates/rates/{value}?parammode=2&ondate="
                       f"{e_now}-{m_now}-{d_now}").json()["Cur_OfficialRate"]
    return num


async def distribution():
    e_now, m_now, d_now, wd_now = await today()
    await asyncio.sleep(1)
    with open("subs.txt", "r") as f:
        for line in f:
            subs.append(line)
    for sub in subs:
        print("–±—É–¥–Ω–∏–µ –¥–Ω–∏")
        try:
            await bot.send_message(sub, "–í–æ—Ç —Ç–∞–∫–∏–µ —Å–µ–≥–æ–¥–Ω—è –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç ü§†")
            # –∏—Å–ø–æ–ª—å–∑—É—é —ç—Ç—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—Ç–æ—Ä–æ–π —Ä–∞–∑, –ø–æ–≤–æ–¥ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            usd = await val("USD")
            eur = await val("EUR")
            rub = await val("RUB")
            print(usd, eur, rub)
            await bot.send_message(sub, f"üá∫üá∏ <b>1 USD = {float('{:.3f}'.format(usd))} —Ä</b>\n"
                                        f"üá™üá∫ <b>1 EUR = {float('{:.3f}'.format(eur))} —Ä</b>\n"
                                        f"üá∑üá∫ <b>100 RUB = {float('{:.3f}'.format(rub))} —Ä</b>",
                                   parse_mode="html")
        except Exception as ex:
            print(ex)
            await bot.send_message(sub, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É ü§ï",
                                   parse_mode="html")
        if str(wd_now) == "4":
            print("It's friday today")
            statistics.main()
            diagram = open(f"friday_apply/{e_now}-{m_now}-{d_now}.png", "rb")
            await bot.send_photo(sub, diagram)
        else:
            print("not friday")
    else:
        print("–Ω–µ –±—É–¥–Ω–∏–µ")


@bot.message_handler(content_types=["photo"])
async def get_user_photo(message):
    "if user send some photo"
    await bot.send_message(message.chat.id, "Nice pic bro", parse_mode="html")


@bot.message_handler(commands=["start"])
async def options(message):
    "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    course = types.KeyboardButton("–ö—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    conv = types.KeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
    subscribe = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
    markup.add(course, conv, subscribe)
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=markup)


@bot.message_handler(content_types=['text'])
async def func(message):
    global subs
    # this func analise all messages
    if message.text == "–ö—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        try:
            usd = await val("USD")
            eur = await val("EUR")
            rub = await val("RUB")
            print(usd, eur, rub)
            await bot.send_message(message.from_user.id, f"üá∫üá∏ <b>1 USD = {float('{:.3f}'.format(usd))} —Ä</b>\n"
                                                         f"üá™üá∫ <b>1 EUR = {float('{:.3f}'.format(eur))} —Ä</b>\n"
                                                         f"üá∑üá∫ <b>100 RUB = {float('{:.3f}'.format(rub))} —Ä</b>",
                                   parse_mode="html")
        except Exception as ex:
            print(ex)
            await bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", parse_mode="html")
    if (message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä"):
        keyboard = types.InlineKeyboardMarkup()
        usd_button = types.InlineKeyboardButton("üá∫üá∏ USD", callback_data="usd1")
        eur_button = types.InlineKeyboardButton("üá™üá∫ EUR", callback_data="eur1")
        rub_button = types.InlineKeyboardButton("üá∑üá∫ RUB", callback_data="rub1")
        byn_button = types.InlineKeyboardButton("üáßüáæ BYN", callback_data="byn1")
        keyboard.row(usd_button, eur_button, rub_button, byn_button)
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É", reply_markup=keyboard)
    if (message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"):
        if f"{message.from_user.id}\n" not in subs:
            subs.append(f"{message.from_user.id}\n")
            print(subs)
            print("–ø–æ–¥–ø–∏—Å–∞–ª—Å—è")
            await bot.send_message(message.from_user.id,
                                   "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –û—Ç–º–µ–Ω–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n"
                                   "–ö–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç,"
                                   " –∞ –≤ –ø—è—Ç–Ω–∏—Ü—É –Ω–µ–¥–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
            with open("subs.txt", "a") as s:
                s.write(str(message.from_user.id) + "\n")

        else:
            keyboard = types.InlineKeyboardMarkup()
            unsubscribe = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsub")
            keyboard.row(unsubscribe)
            await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–µ—ë?",
                                   reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "unsub")
async def val2(callback_obj: telebot.types.CallbackQuery):
    try:
        subs.remove(f"{callback_obj.from_user.id}\n")
        with open("subs.txt", "w") as s:
            for sub in subs:
                s.write(sub)
        print(subs)
        print("–æ—Ç–ø–∏—Å–∞–ª—Å—è")
        await bot.send_message(callback_obj.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    except Exception as ex:
        print(ex)
        await bot.send_message(callback_obj.from_user.id,
                               "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –Ω–µ—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")


@bot.callback_query_handler(func=lambda call: call.data in str1)
async def val2(callback_obj: telebot.types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    usd_button = types.InlineKeyboardButton("üá∫üá∏ USD", callback_data="usd2")
    eur_button = types.InlineKeyboardButton("üá™üá∫ EUR", callback_data="eur2")
    rub_button = types.InlineKeyboardButton("üá∑üá∫ RUB", callback_data="rub2")
    byn_button = types.InlineKeyboardButton("üáßüáæ BYN", callback_data="byn2")
    keyboard.row(usd_button, eur_button, rub_button, byn_button)

    # —Å–¥–µ–ª–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ –∏—Ñ–æ–≤ {["usd1", "usd2"]:"üá∫üá∏"}

    if callback_obj.data == "usd1":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üá∫üá∏")
    if callback_obj.data == "eur1":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üá™üá∫")
    if callback_obj.data == "rub1":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üá∑üá∫")
    if callback_obj.data == "byn1":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üáßüáæ")
    await bot.send_message(callback_obj.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –≤–∞–ª—é—Ç—É", reply_markup=keyboard)
    global value1
    value1[callback_obj.from_user.id] = callback_obj.data
    print(value1)

    await bot.answer_callback_query(callback_query_id=callback_obj.id)


@bot.callback_query_handler(func=lambda call: call.data in str2)
async def calculate(callback_obj: telebot.types.CallbackQuery):
    if callback_obj.data == "usd2":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üá∫üá∏")
    if callback_obj.data == "eur2":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üá™üá∫")
    if callback_obj.data == "rub2":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üá∑üá∫")
    if callback_obj.data == "byn2":
        await bot.send_message(callback_obj.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ üáßüáæ")
    global value2
    value2[callback_obj.from_user.id] = callback_obj.data
    print(value2)
    msg = bot.send_message(callback_obj.from_user.id, "–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
    bot.register_next_step_handler(msg, get_sum)

    await bot.answer_callback_query(callback_query_id=callback_obj.id)


async def get_sum(message):
    text = message.text
    text_er = text[:]
    v1 = value1[message.from_user.id]
    v2 = value2[message.from_user.id]
    print(v1 + v2)
    if (text.replace(".", "", 1).isdigit() or text.replace(",", "", 1).isdigit()) and len(v1) > 3 and len(v2) > 3:
        text = float(text)
        if v1[:-1] == "usd":
            text = text * (await val("USD"))
        elif v1[:-1] == "rub":
            text = text * (await val("RUB") / 100)
        elif v1[:-1] == "eur":
            text = text * (await val("EUR"))

        if v2[:-1] == "usd":
            text = text / (await val("USD"))
        elif v2[:-1] == "rub":
            text = text / (await val("RUB") / 100)
        elif v2[:-1] == "eur":
            text = text / (await val("EUR"))
        await bot.send_message(message.from_user.id,
                               f"{text_er} {v1.upper()[:-1]} = {float('{:.3f}'.format(text))} {v2.upper()[:-1]}")
    elif len(v1) < 4:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É")
    else:
        await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


schedule.every(1).seconds.do(distribution)
loop = asyncio.get_event_loop()
while True:
    loop.run_until_complete(schedule.run_pending())
    time.sleep(0.1)
    asyncio.run(bot.polling(none_stop=True))
